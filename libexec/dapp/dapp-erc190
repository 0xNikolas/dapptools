#!/usr/bin/env node
var DAPP_OUT = process.env.DAPP_OUT
var DAPP_SRC = process.env.DAPP_SRC

var basename = x => x.replace(/\..*?$/, "")
var cat      = x => require("fs").readFileSync(x, { encoding: "utf-8" })
var format   = x => JSON.stringify(x, null, 2)
var lines    = x => x ? x.split("\n") : []
var ls       = x => require("fs").readdirSync(x)
var merge    = (...xs) => Object.assign({}, ...xs)
var uniq     = xs => [...new Set(xs)]

var dapp = lines(cat("Dappfile"))
.filter (x => /^[^#].*\S/.test(x))
.map    (x => x.match(/^(\S+)(.*)/))
.reduce ((a, [m, k, v]) => ((a[k] = a[k] || []).push(v.trim()), a), {})

if (!dapp.name.length) {
  console.error("error: Dappfile: missing name")
  process.exit(1)
}

if (!dapp.version.length) {
  console.error("error: Dappfile: missing version")
  process.exit(1)
}

try {
  if (!require("fs").lstatSync(DAPP_SRC).isDirectory()) {
    throw new Error
  }
} catch (error) {
  console.error(`error: missing \`${DAPP_SRC}' directory`)
  process.exit(1)
}

try {
  if (!require("fs").lstatSync(DAPP_OUT).isDirectory()) {
    throw new Error
  }
} catch (error) {
  console.error(`error: missing \`${DAPP_OUT}' directory`)
  process.exit(1)
}

console.log(format({
  lockfile_version : "1",

  package_name : dapp.name[0],
  version      : dapp.version[0],

  meta: {
    description : (dapp.description || [])[0],
    license     : (dapp.license || [])[0],
    authors     : dapp.author,
    keywords    : dapp.keyword,
  },

  build_dependencies: {
    // TODO
  },

  sources: merge(...ls(DAPP_SRC).filter(x => /\.sol$/.test(x)).map(name => ({
    [`./${DAPP_SRC}/${name}`]: cat(`./${DAPP_SRC}/${name}`),
  }))),

  deployments: {
    // TODO
  },

  contract_types: merge(...uniq(ls(DAPP_OUT).map(basename)).map(name => ({
    [name]: {
      contract_name    : name,
      abi              : JSON.parse(cat(`${DAPP_OUT}/${name}.abi`)),
      bytecode         : cat(`${DAPP_OUT}/${name}.bin`),
      runtime_bytecode : cat(`${DAPP_OUT}/${name}.bin-runtime`),
    }
  }))),
}))
