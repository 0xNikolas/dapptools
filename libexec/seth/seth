#!/usr/bin/env bash
set -e
### seth -- command-line Ethereum RPC client
### Usage: seth [<options>] <command> [<args>]
###    or: seth <command> --help
###
### Perform Ethereum RPC calls from the comfort of your command line.
###
### Connection options:
###
###    -h, --rpc-host=<host>      RPC endpoint host (default: `localhost')
###    -p, --rpc-port=<number>    RPC endpoint port (default: `8545')
###        --rpc-url=<url>        RPC endpoint URL (overrides `-h' and `-p')
opts=(h:p:) optl+=(rpc-host:,rpc-port:,rpc-url:,)
###
### Transaction options:
###
###    -F, --from=<origin>        account to use or send transaction from
###        --origin=<origin>      (synonym for `--from')
###
###    -G, --gas=<number>         number of units of gas to provide
###        --gas-price=<amount>   price of each gas unit (e.g. `20 Gwei')
###
###    -V, --value=<amount>       amount of money to send (e.g. `0.1 ETH')
opts+=(F:G:V:) optl+=(from:,origin:,gas:,gas-price:,value:)
###
### Options for seth-send(1):
###
###        --create               use the calldata to create a new object
###
### Options for seth-send(1) and seth-receipt(1):
###
###        --async                exit after printing transaction hash
optl+=(async)
###
### Options for seth-call(1), seth-estimate(1) and others:
###
###    -b, --block=<number>       block number (default: `latest')
opts+=(b:) optl+=(block:,)
###
### Other options:
###
###    -s, --silent               suppress standard error logging output
###    -q, --quiet                (synonym for `--silent')
opts+=(sq) optl+=(silent,quiet)

if ! [[ $SETH_INITIALIZED ]]; then
  export SETH_INITIALIZED=true

  case $(uname) in
  Linux)
    ;;
  Darwin)
    if which ggrep &>/dev/null; then
      export GREP=ggrep
    else
      echo >&2 "${0##*/}: error: ggrep: command not found"
      installation='brew tap homebrew/dupes && brew install grep'
      echo >&2 "${0##*/}: please run \`$installation'"
      exit 1
    fi

    shopt -s nullglob
    for getopt in "$(brew --prefix)"/Cellar/gnu-getopt/*/bin; do :; done
    if [[ $getopt ]]; then
      PATH=$getopt:$PATH
    else
      echo >&2 "${0##*/}: error: gnu-getopt: package not found"
      installation='brew install gnu-getopt'
      echo >&2 "${0##*/}: please run \`$installation'"
      exit 1
    fi
    ;;
  *)
    echo >&2 "${0##*/}: error: unsupported operating system: $(uname)"
    exit 1
  esac
    
  [[ -e ~/.sethrc ]] && . ~/.sethrc
fi

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 = -* ]] && which "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$@"
fi

args=$(getopt -n ${0##*/} -o "${opts[*]}" -l "${optl[*]}" -- "$@")
eval set -- $args

while [[ $1 ]]; do
  case $1 in
    --)              shift; break;;

    -h|--rpc-host)   shift; export SETH_RPC_HOST=$1;;
    -p|--rpc-port)   shift; export SETH_RPC_PORT=$1;;
       --rpc-url)    shift; export SETH_RPC_URL=$1;;


    -F|--from)       shift; export SETH_FROM=$1;;
       --origin)     shift; export SETH_FROM=$1;;

    -G|--gas)        shift; export SETH_GAS=$1;;
       --gas-price)  shift; export SETH_GAS_PRICE;;

    -V|--value)      shift; export SETH_VALUE=$1;;

       --async)      export SETH_ASYNC=true;;

    -b|--block)      shift; export SETH_BLOCK=$1;;

    -s|--silent)     export SETH_SILENT=true;;
    -q|--quiet)      export SETH_SILENT=true;;

    *) printf "${0##*/}: internal error: %q\n" "$1"; exit 1
  esac; shift
done

export SETH_ORIGIN=${SETH_ORIGIN:-${SETH_FROM:-$ETH_FROM}}
export SETH_RPC_URL=${SETH_RPC_URL:-$ETH_RPC_URL}
export SETH_RPC_HOST=${SETH_RPC_HOST:-$ETH_RPC_HOST}
export SETH_RPC_PORT=${SETH_RPC_PORT:-$ETH_RPC_PORT}

"${0##*/}-${1-help}" "${@:2}"
