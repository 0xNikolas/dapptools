#!/usr/bin/env bash
### seth -- command-line Ethereum RPC client
### Usage: seth [<options>] <command> [<args>]
###    or: seth <command> --help
###
### Perform Ethereum RPC calls from the comfort of your command line.
###
### Connection options:
###
###    -h, --host=<host>          RPC endpoint host (default: `localhost')
###    -p, --port=<port>          RPC endpoint port (default: `8545')
###
opts+=h:p: optl+=host:,port:,

### Transaction options:
###
###    -F, --from=<sender>        account to send transaction, etc., from
###
###    -G, --gas=<number>         number of units of gas to provide
###        --gas-price=<amount>   price of each gas unit (e.g. `20 Gwei')
###
###    -V, --value=<amount>       amount of money to send (e.g. `0.1 ETH')
###
opts+=F:G:V: optl+=from:,gas:,gas-price:,value:,

### Options for seth-call(1), seth-estimate(1) and others:
###
###    -B, --block=<number>       block number (default: `latest')
###
opts+=B: optl+=block:,

### Options for seth-send(1):
###
###    --new                      use the calldata to create a new object
###
### Options for seth-send(1) and seth-receipt(1):
###
###    --[no-]wait                wait for transaction receipt (or not)
###
optl+=new,no-wait,wait,

### Other options:
###
###    -s, --silent               suppress standard error logging output
###    -j, --json-output          print raw JSON to standard output
opts+=sj optl+=silent,json-output,

set -e

if ! [[ $SETH_INITIALIZED ]]; then
  export SETH_INITIALIZED=true

  case $(uname) in
  Linux)
    ;;
  Darwin)
    if which ggrep &>/dev/null; then
      export GREP=ggrep
    else
      echo >&2 "${0##*/}: error: ggrep: command not found"
      installation='brew tap homebrew/dupes && brew install grep'
      echo >&2 "${0##*/}: please run \`$installation'"
      exit 1
    fi

    shopt -s nullglob
    for getopt in "$(brew --prefix)"/Cellar/gnu-getopt/*/bin; do :; done
    if [[ $getopt ]]; then
      PATH=$getopt:$PATH
    else
      echo >&2 "${0##*/}: error: gnu-getopt: package not found"
      installation='brew install gnu-getopt'
      echo >&2 "${0##*/}: please run \`$installation'"
      exit 1
    fi
    ;;
  *)
    echo >&2 "${0##*/}: error: unsupported operating system: $(uname)"
    exit 1
  esac

  [[ -e ~/.sethrc ]] && . ~/.sethrc
fi

if [[ $2 = --help ]]; then
  exec "${0##*/}" help -- "$1"
elif [[ $1 = -* ]] && which "${0##*/}-$1" &>/dev/null; then
  exec "${0##*/}-$1" "${@:2}"
fi

args=$(getopt -n "${0##*/}" -o "$opts" -l "$optl" -- "$@")
eval "set -- $args"

while [[ $1 ]]; do
  case $1 in
    --)              shift; break;;

    -h|--host)       shift; export SETH_HOST=$1;;
    -p|--port)       shift; export SETH_PORT=$1;;

    -F|--from)       shift; export SETH_FROM=$1;;
    -G|--gas)        shift; export SETH_GAS=$1;;
       --gas-price)  shift; export SETH_GAS_PRICE;;
    -V|--value)      shift; export SETH_VALUE=$1;;

    -B|--block)      shift; export SETH_BLOCK=$1;;

       --new)               export SETH_NEW=yes;;

       --wait)              export SETH_WAIT=yes;;
       --no-wait)           export SETH_WAIT=no;;

    -s|--silent)            export SETH_SILENT=yes;;
    -j|--json-output)       export SETH_JSON_OUTPUT=yes;;

    *) printf "${0##*/}: internal error: %q\n" "$1"; exit 1
  esac; shift
done

export SETH_FROM=${SETH_FROM:-${SETH_SENDER:-${ETH_FROM:-$ETH_SENDER}}}
export SETH_HOST=${SETH_HOST:-${SETH_RPC_HOST:-$ETH_RPC_HOST}}
export SETH_PORT=${SETH_PORT:-${SETH_RPC_PORT:-$ETH_RPC_PORT}}
export SETH_URL=${SETH_URL:-${SETH_RPC_URL:-$ETH_RPC_URL}}

"${0##*/}-${1-help}" "${@:2}"
