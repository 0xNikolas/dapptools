#!/usr/bin/env node
var assert = require("assert")
var cp = require("child_process")
var fs = require("fs")

var test = process.argv[2]

var cannedResponses = []
var unexpectedCalls = []

var formatJSON = json =>
  JSON.stringify(JSON.parse(json), null, 2)
var readFileSync = filename =>
  fs.readFileSync(filename, { encoding: "utf8" })

function deleteFileSync(filename) {
  try {
    fs.unlinkSync(filename)
  } catch (error) {
  }
}

function deepEqual(a, b) {
  try {
    assert.deepEqual(a, b)
    return true
  } catch (error) {
    return false
  }
}

function findCannedResponse(request, callback) {
  for (var [x, response] of cannedResponses) {
    if (deepEqual(x, request)) {
      callback(response)
      return
    }
  }
}

function slurp(stream, callback) {
  var data = []
  stream.on("data", chunk => data.push(chunk))
  stream.on("end", () => callback(Buffer.concat(data).toString()))
}

var server = require("http").createServer((request, response) => {
  slurp(request, json => {
    findCannedResponse(JSON.parse(json), cannedResponse => {
      if (cannedResponse) {
        response.end(JSON.stringify(cannedResponse))
      } else {
        unexpectedCalls.push(json)
        response.end()
      }
    })
  })
}).listen(() => {
  process.env.ETH_RPC_PORT = server.address().port

  for (var part of readFileSync(`${test}.mock`).split(/\n\n/)) {
    var [request, result] = part.split(/\n\s*=>\s*/m)
    var [_, method, params] = request.match(/^(.*?) +(.*)/)

    cannedResponses.push([{
      jsonrpc: "2.0", id: 1,
      method: method,
      params: JSON.parse(params),
    }, {
      jsonrpc: "2.0", id: 1,
      result: JSON.parse(result),
    }])
  }

  cp.execFile(test, (error, actual, stderr) => {
    var expected = readFileSync(`${test}.expected`)

    if (actual == expected && !unexpectedCalls.length) {
      deleteFileSync(`${test}.actual`)
      fs.writeFileSync(`${test}.ok`, "")
      console.log(`ok - ${test}`)
      process.exit(0)
    } else {
      deleteFileSync(`${test}.ok`)
      fs.writeFileSync(`${test}.actual`, actual)
      console.log(`not ok - ${test}`)
      process.stdout.write(cp.execSync(`
        diff -C3 ${test}.expected ${test}.actual |
        sed "s/^/# /" || true
      `))

      if (unexpectedCalls.length) {
        console.log("#")
        console.log(`# Unexpected RPC calls:`)
        for (var json of unexpectedCalls) {
          console.log(formatJSON(json).replace(/^/gm, "# "))
        }
      }

      process.exit(1)
    }
  })
})
